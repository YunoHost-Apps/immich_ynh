#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# CHECK HARDWARE REQUIREMENTS
#=================================================
ynh_script_progression "Checking hardware requirements..."

myynh_check_hardware

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression "Stopping $app's systemd service..."

ynh_systemctl --service="$app-server" --action="stop"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression "Ensuring downward compatibility..."

if ynh_app_upgrading_from_version_before 1.118.2~ynh1
then
	if ynh_hide_warnings yunohost service status "$app-microservices" >/dev/null
	then
		yunohost service remove "$app-microservices"
	fi
	ynh_config_remove_systemd "$app-microservices"
	find "/var/log/$app/" -name "$app-microservices.log*" -delete
	ynh_app_setting_delete --key="port_microservices"
	ynh_app_setting_delete --key="checksum__var_www_immich_env-machine-learning"
	ynh_app_setting_delete --key="checksum__var_www_immich_env-server"
	ynh_app_setting_delete --key="checksum__etc_systemd_system_immich-microservices.service"
fi
if ynh_app_upgrading_from_version_before 1.132.0~ynh1
then
	ynh_die "This update requires applications to have started up at least once on 1.132.0+. \
		\nPlease first manually update with 1.136.0~ynh1 with the following command: \
		\n's\0u\0d\0o yunohost app upgrade immich -u https://github.com/YunoHost-Apps/immich_ynh/tree/d70256707e598e5817b600036a742da65939746a' \
		\nOnce done you can upgrade to the latest version."
fi
if ynh_app_upgrading_from_version_before 1.142.0~ynh2
then
	ynh_app_setting_delete --key=python
	ynh_app_setting_set --key=db_cluster --value="$(ynh_app_setting_get --key=psql_version)/main"
	ynh_app_setting_delete --key=psql_version
	ynh_app_setting_delete --key=psql_port
	ynh_app_setting_set --key=db_pwd --value="$(ynh_app_setting_get --key=psql_pwd)"
	ynh_app_setting_delete --key=psql_pwd
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Upgrading source files..."

ynh_safe_rm "$install_dir"

source_dir="$install_dir/source"
ynh_setup_source --source_id="main" --dest_dir="$source_dir" --full_replace

#=================================================
# INSTALL NODEJS
#=================================================
ynh_script_progression "Installing nodejs..."

nodejs_version=$(cat "$source_dir/server/.nvmrc" | cut -d '.' -f1) # 22
ynh_nodejs_install

#=================================================
# INSTALL PACKAGES
#=================================================
ynh_script_progression "Installing additionnal packages (if needed)..."

myynh_install_postgresql_packages

#=================================================
# UPDATE A POSTGRESQL DATABASE
#=================================================
ynh_script_progression "Updating a PostgreSQL database..."

if [[ $YNH_DEBIAN_VERSION == "bookworm" ]]
then
	myynh_set_default_psql_cluster_to_debian_default
elif [[ $YNH_DEBIAN_VERSION == "trixie" ]]
then
	# Check if the db is still on cluster 16 and if yes dumb and restore the db to 17 + delete the db on 16
	old_cluster="$psql_bookworm/main"
	new_cluster="$psql_trixie/main"
	if [[ $(myynh_execute_psql_as_root \
		--cluster="$old_cluster" \
		--sql="SELECT datname FROM pg_database WHERE datname = '$app';" \
		--options="--tuples-only --no-align") == "immich" ]]
	then
		# Dump db on old cluster
		myynh_dump_psql_db --cluster="$old_cluster"
		# Drop empty db on new cluster
		myynh_drop_psql_db --cluster="$new_cluster"
		# Restore db on new cluster
		myynh_restore_psql_db --cluster="$new_cluster"
		# Drop db on old cluster
		myynh_drop_psql_db --cluster="$old_cluster"
	fi
fi

myynh_update_psql_db

#=================================================
# ADD SWAP IF NEEDED
#=================================================
ynh_script_progression "Temporary adding additional swap if needed..."

myynh_add_swap

#=================================================
# MAKE INSTALL
#=================================================
ynh_script_progression "Making install..."

myynh_install_immich

#=================================================
# REMOVE TEMPORARY SWAP IF ADDED
#=================================================
ynh_script_progression "Remove temporary swap if added..."

ynh_del_swap_fixed

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression "Updating $app's configuration files..."

db_pwd=$(ynh_app_setting_get --key=db_pwd)
db_port=$(ynh_app_setting_get --key=db_port)
ynh_config_add --template="env" --destination="$install_dir/env"
mkdir --parents "$data_dir/backups"
ynh_config_add --template="restore_immich_db_backup.sh" --destination="$data_dir/backups/restore_immich_db_backup.sh"

#=================================================
# REAPPLY SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Upgrading system configurations related to $app..."

ynh_config_add_nginx

ynh_config_add_systemd --service="$app-server" --template="$app-server.service"
ynh_config_add_systemd --service="$app-machine-learning" --template="$app-machine-learning.service"

yunohost service add "$app-server" --description="Immich Server" --log="/var/log/$app/$app-server.log"
yunohost service add "$app-machine-learning" --description="Immich Machine Learning" --log="/var/log/$app/$app-machine-learning.log"

ynh_multimedia_build_main_dir
ynh_multimedia_addaccess "$app"

ynh_config_add_logrotate

ynh_config_add_fail2ban --logpath="/var/log/$app/$app-server.log" --failregex="$failregex"

#=================================================
# SET FILE OWNERSHIP / PERMISSIONS
#=================================================

myynh_set_permissions

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

ynh_systemctl --service="$app-machine-learning" --action="start" --wait_until="Application startup complete" --log_path="/var/log/$app/$app-machine-learning.log"
ynh_systemctl --service="$app-server" --action="start" --wait_until="Immich Server is listening" --log_path="/var/log/$app/$app-server.log" --timeout=900

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
